import streamlit as st
import io
import base64
from PIL import Image
import openai
import json
import requests
import streamlit as st
from PIL import ImageEnhance
import os 
from openai import OpenAI


# Elimina la variable de entorno antes de que httpx la use
os.environ.pop("SSL_CERT_FILE", None)

# Inicializa el nuevo cliente
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))



# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="AnuncioProAI", page_icon="üè†", layout="wide")

# Idiomas disponibles y selector
idiomas = {
    "Espa√±ol": "es",
    "Ingl√©s": "en",
    "Franc√©s": "fr",
    "Italiano": "it",
    "Alem√°n": "de"
}
idioma_seleccionado = st.sidebar.selectbox("üåê Idioma / Language", list(idiomas.keys()))
lang = idiomas[idioma_seleccionado]

# Diccionario de textos en diferentes idiomas
textos = {
    "es": {
        "titulo": "AnuncioProAI - Generador de anuncios inmobiliarios con IA",
        "nav": ["Inicio", "Generador", "Planes", "Contacto"],
        "inicio_header": "Bienvenido a AnuncioProAI",
        "inicio_desc": "Genera anuncios inmobiliarios profesionales y atractivos en segundos con la ayuda de la inteligencia artificial.",
        "inicio_puntos": [
            "‚úÖ Optimiza tus anuncios para portales y redes sociales.",
            "‚úÖ Mejora im√°genes autom√°ticamente.",
            "‚úÖ Traduce y adapta el texto a varios idiomas."
        ],
        "inicio_mensaje": "¬°Comienza a crear tu anuncio ahora!",
        "planes_titulo": "Elige tu plan",
        "contacto_titulo": "Contacto",
        "contacto_desc": "¬øTienes dudas o sugerencias? ¬°Escr√≠benos!",
        "nombre": "Nombre",
        "correo": "Correo electr√≥nico",
        "mensaje": "Mensaje",
        "enviar": "Enviar"
    },
    "en": {
        "titulo": "AnuncioProAI - AI-powered Real Estate Ad Generator",
        "nav": ["Home", "Generator", "Plans", "Contact"],
        "inicio_header": "Welcome to AnuncioProAI",
        "inicio_desc": "Create professional and attractive real estate ads in seconds with the help of artificial intelligence.",
        "inicio_puntos": [
            "‚úÖ Optimize your ads for portals and social networks.",
            "‚úÖ Automatically enhance images.",
            "‚úÖ Translate and adapt text to multiple languages."
        ],
        "inicio_mensaje": "Start creating your ad now!",
        "planes_titulo": "Choose your plan",
        "contacto_titulo": "Contact",
        "contacto_desc": "Questions or suggestions? Write to us!",
        "nombre": "Name",
        "correo": "Email",
        "mensaje": "Message",
        "enviar": "Send"
    },
    "fr": {
        "titulo": "AnuncioProAI - G√©n√©rateur d'annonces immobili√®res avec IA",
        "nav": ["Accueil", "G√©n√©rateur", "Plans", "Contact"],
        "inicio_header": "Bienvenue sur AnuncioProAI",
        "inicio_desc": "G√©n√©rez des annonces immobili√®res professionnelles et attrayantes en quelques secondes gr√¢ce √† l'intelligence artificielle.",
        "inicio_puntos": [
            "‚úÖ Optimisez vos annonces pour les portails et les r√©seaux sociaux.",
            "‚úÖ Am√©liorez automatiquement les images.",
            "‚úÖ Traduisez et adaptez le texte en plusieurs langues."
        ],
        "inicio_mensaje": "Commencez √† cr√©er votre annonce maintenant !",
        "planes_titulo": "Choisissez votre plan",
        "contacto_titulo": "Contact",
        "contacto_desc": "Des questions ou des suggestions ? √âcrivez-nous !",
        "nombre": "Nom",
        "correo": "E-mail",
        "mensaje": "Message",
        "enviar": "Envoyer"
    },
    "it": {
        "titulo": "AnuncioProAI - Generatore di annunci immobiliari con IA",
        "nav": ["Home", "Generatore", "Piani", "Contatto"],
        "inicio_header": "Benvenuto su AnuncioProAI",
        "inicio_desc": "Crea annunci immobiliari professionali e accattivanti in pochi secondi con l'aiuto dell'intelligenza artificiale.",
        "inicio_puntos": [
            "‚úÖ Ottimizza i tuoi annunci per portali e social.",
            "‚úÖ Migliora automaticamente le immagini.",
            "‚úÖ Traduci e adatta il testo in pi√π lingue."
        ],
        "inicio_mensaje": "Inizia subito a creare il tuo annuncio!",
        "planes_titulo": "Scegli il tuo piano",
        "contacto_titulo": "Contatto",
        "contacto_desc": "Domande o suggerimenti? Scrivici!",
        "nombre": "Nome",
        "correo": "Email",
        "mensaje": "Messaggio",
        "enviar": "Invia"
    },
    "de": {
        "titulo": "AnuncioProAI - KI-gest√ºtzter Immobilienanzeigen-Generator",
        "nav": ["Startseite", "Generator", "Pl√§ne", "Kontakt"],
        "inicio_header": "Willkommen bei AnuncioProAI",
        "inicio_desc": "Erstellen Sie professionelle und ansprechende Immobilienanzeigen in Sekunden mit Hilfe von k√ºnstlicher Intelligenz.",
        "inicio_puntos": [
            "‚úÖ Optimieren Sie Ihre Anzeigen f√ºr Portale und soziale Netzwerke.",
            "‚úÖ Bilder automatisch verbessern.",
            "‚úÖ Text in mehrere Sprachen √ºbersetzen und anpassen."
        ],
        "inicio_mensaje": "Beginnen Sie jetzt mit der Erstellung Ihrer Anzeige!",
        "planes_titulo": "W√§hlen Sie Ihren Plan",
        "contacto_titulo": "Kontakt",
        "contacto_desc": "Fragen oder Anregungen? Schreiben Sie uns!",
        "nombre": "Name",
        "correo": "E-Mail",
        "mensaje": "Nachricht",
        "enviar": "Senden"
    }
}

# Men√∫ y navegaci√≥n
st.title(textos[lang]["titulo"])
menu = st.sidebar.radio("Navegaci√≥n", textos[lang]["nav"])

# Inicio
if menu == textos[lang]["nav"][0]:
    st.header(textos[lang]["inicio_header"])
    st.markdown(textos[lang]["inicio_desc"])
    for punto in textos[lang]["inicio_puntos"]:
        st.write(punto)
    st.image("https://images.unsplash.com/photo-1600585154340-be6161a56a0c", use_column_width=True)
    st.success(textos[lang]["inicio_mensaje"])

# Generador
elif menu == textos[lang]["nav"][1]:

    # Tipo de operaci√≥n
    st.subheader("‚öôÔ∏è Tipo de operaci√≥n")
    tipo_operacion = st.selectbox("¬øSe trata de una venta o alquiler?", ["Venta", "Alquiler","Alquiler vacacional", "Alquiler con opci√≥n a compra"])

    # Secci√≥n de datos del inmueble
    st.subheader("üìã Caracter√≠sticas del inmueble")
    tipo = st.selectbox("Tipo de propiedad", [
        "Piso", "√Åtico", "D√∫plex", "Estudio / loft", "Casa", "Chalet", "Adosado",
        "Bungalow", "Piso de protecci√≥n oficial (VPO)", "Finca/Rural", "Cortijo", "Local comercial",
        "Oficina", "Nave industrial", "Terreno", "Mansi√≥n"
    ])
    estado = st.selectbox("Estado", ["A demoler", "A reformar", "Buen estado", "Como nuevo", "Nuevo"])
    m2 = st.number_input("m¬≤ construidos", min_value=10, max_value=30000)
    m2_utiles = st.number_input("m¬≤ √∫tiles", min_value=10, max_value=30000)
    m2_terreno = st.number_input("m¬≤ de terreno", min_value=0, max_value=30000)
    habitaciones = st.number_input("N√∫mero de habitaciones", min_value=0, max_value=50)
    ba√±os = st.number_input("N√∫mero de ba√±os", min_value=0, max_value=10)
    fachada = st.radio("Fachada", ["Exterior", "Interior"])
    ascensor = st.radio("¬øTiene ascensor?", ["S√≠ tiene", "No tiene"])
    certificado = st.selectbox("Calificaci√≥n energ√©tica", ["A", "B", "C", "D", "E", "F", "G"])
    orientacion = st.selectbox("Orientaci√≥n", [
        "Norte", "Sur", "Este", "Oeste",
        "Noreste", "Noroeste",
        "Sureste", "Suroeste"
    ])

    # Selecci√≥n de tipos de suelo
    st.subheader("ü™µ Tipos de suelo")
    suelo_interior = st.selectbox("Tipo de suelo en el interior", [
        "Gres","Parquet", "Tarima flotante", "Baldosa cer√°mica", "M√°rmol", "Granito", "Vin√≠lico", "Moqueta", "Cemento pulido", "Laminado", "Corcho"
    ])
    suelo_exterior = st.selectbox("Tipo de suelo en el exterior", [
        "Ninguno", "Grava", "Pavimento de adoqu√≠n", "Hormig√≥n", "Terracota", "Decking de madera", "Piedra natural", "C√©sped artificial", "Pavimento permeable"
    ])

    # Caracter√≠sticas adicionales
    st.subheader("‚ú® Extras")
    extras_vivienda = st.multiselect("Caracter√≠sticas de la vivienda", [
        "Semiamueblado","Amueblado", "Armarios empotrados", "Aire acondicionado", "Terraza", "Balc√≥n","Lavadero","Chimenea", "Trastero", "Plaza de garaje"])
    extras_edificio = st.multiselect("Caracter√≠sticas del edificio", ["Piscina", "Zona verde", "Gimnasio", "Portero", "Acceso adaptado", "Ascensor", "Zonas comunes","zona infantil", "Pista de tenis","Pista de p√°del", "Sauna", "Jacuzzi"])

    metros_terraza = 0
    metros_balcon = 0
    metros_trastero = 0
    metros_garaje = 0

    if "Terraza" in extras_vivienda:
        metros_terraza = st.number_input("Metros cuadrados de la terraza", min_value=1, max_value=1000)
    if "Balc√≥n" in extras_vivienda:
        metros_balcon = st.number_input("Metros cuadrados del balc√≥n", min_value=1, max_value=1000)
    if "Trastero" in extras_vivienda:
        metros_trastero = st.number_input("Metros cuadrados del trastero", min_value=1, max_value=1000)
    if "Plaza de garaje" in extras_vivienda:
        metros_garaje = st.number_input("Metros cuadrados de la plaza de garaje", min_value=1, max_value=1000)

    # Localizaci√≥n del inmueble y servicios cercanos
    st.subheader("üìç Localizaci√≥n y servicios cercanos")
    ubicacion = st.text_input("üìç Direcci√≥n del inmueble", "Introduce la direcci√≥n del inmueble aqu√≠")

    servicios_cercanos = st.multiselect(
        "Selecciona los servicios cercanos",
        ["Centro m√©dico", "Colegios", "Centros comerciales", "Transporte p√∫blico", "Parques", "Tiendas y restaurantes", "Gimnasios", "Farmacias", "Estaciones de tren", "Aeropuerto"]
    )

    cerca_playa = st.checkbox("Cerca de la playa")
    primera_linea_de_playa = st.checkbox("Primera l√≠nea de playa")
    segunda_linea_de_playa = st.checkbox("Segunda l√≠nea de playa")
    cerca_montana = st.checkbox("Cerca de la monta√±a")

    distancia_playa = None
    distancia_montana = None
    if cerca_playa:
        distancia_playa = st.number_input("¬øA qu√© distancia est√° la playa (en metros)?", min_value=0, step=10)
    if cerca_montana:
        distancia_montana = st.number_input("¬øA qu√© distancia est√° la monta√±a (en metros)?", min_value=0, step=10)

    descripcion_servicios = "Estos son los servicios cercanos a la propiedad: "
    if 'servicios_cercanos' in locals() and servicios_cercanos:
        descripcion_servicios += ", ".join(servicios_cercanos)
    else:
        descripcion_servicios = "No se han seleccionado servicios cercanos."

    descripcion_cercania = ""
    if cerca_playa:
        descripcion_cercania = f"Est√° a {distancia_playa} metros de la playa."
    elif cerca_montana:
        descripcion_cercania = f"Est√° a {distancia_montana} metros de la monta√±a."

    st.write(f"üîë **Direcci√≥n**: {ubicacion if 'ubicacion' in locals() else 'No se ha proporcionado una direcci√≥n.'}")
    st.write(f"üèô **Servicios cercanos**: {descripcion_servicios}")
    if descripcion_cercania:
        st.write(f"üåä/üèû **Cercan√≠a**: {descripcion_cercania}")

    # Precio y situaci√≥n legal
    st.subheader("üí∂ Precio y situaci√≥n")
    precio = st.number_input("Precio del inmueble (‚Ç¨)", min_value=0)
    gastos = st.number_input("Gastos de comunidad (‚Ç¨ / mes)", min_value=0)
    situacion = st.selectbox("¬øSituaci√≥n excepcional?", [
        "No, en ninguna situaci√≥n excepcional", "Ocupada ilegalmente", "Alquilada, con inquilinos", "Nuda propiedad"])

    # Informaci√≥n adicional
    st.subheader("üìù Informaci√≥n adicional")
    informacion_adicional = st.text_area("¬øHay algo m√°s que quieras a√±adir sobre la propiedad?")
    if informacion_adicional:
        st.write("Informaci√≥n adicional:", informacion_adicional)

    # esta funci√≥n recopila todos los datos introducidos en el formulario y los devuelve como un diccionario
    def recopilar_datos():
        """Recopila todos los datos introducidos en el formulario"""
        datos = {
            "tipo_operacion": tipo_operacion,
            "tipo": tipo,
            "estado": estado,
            "m2": m2,
            "m2_utiles": m2_utiles,
            "m2_terreno": m2_terreno,
            "habitaciones": habitaciones,
            "ba√±os": ba√±os,
            "fachada": fachada,
            "ascensor": ascensor,
            "certificado": certificado,
            "orientacion": orientacion,
            "suelo_interior": suelo_interior,
            "suelo_exterior": suelo_exterior,
            "extras_vivienda": extras_vivienda,
            "extras_edificio": extras_edificio,
            "metros_terraza": metros_terraza,
            "metros_balcon": metros_balcon,
            "metros_trastero": metros_trastero,
            "metros_garaje": metros_garaje,
            "ubicacion": ubicacion,
            "descripcion_servicios": descripcion_servicios,
            "descripcion_cercania": descripcion_cercania if 'descripcion_cercania' in locals() else "",
            "precio": precio,
            "gastos": gastos,
            "situacion": situacion,
            "informacion_adicional": informacion_adicional if informacion_adicional else "",
            "destino": destino if 'destino' in locals() else "",
        }
        return datos

    # Funci√≥n para convertir imagen a base64
    def imagen_a_base64(imagen):
        buffered = io.BytesIO()
        imagen.save(buffered, format="JPEG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        return img_str

    # Funci√≥n para aplicar mejoras simples con PIL (brillo, color, etc.)
    def aplicar_mejoras_pil(imagen, opciones):
        # Copia la imagen para no modificar la original
        img = imagen.convert("RGB")
        
        if opciones["mejorar_iluminacion"]:
            enhancer = ImageEnhance.Brightness(img)
            img = enhancer.enhance(1.2)  # Aumenta el brillo

        if opciones["corregir_color"]:
            enhancer = ImageEnhance.Color(img)
            img = enhancer.enhance(1.3)  # Aumenta la saturaci√≥n
        
        # Puedes a√±adir m√°s mejoras aqu√≠ seg√∫n las opciones
        return img

    # Funci√≥n para procesar imagen con IA
    def procesar_imagen_con_ia(imagen, opciones):
        try:
            # Primero aplica mejoras locales con PIL seg√∫n las opciones
            imagen_mejorada = aplicar_mejoras_pil(imagen, opciones)
            
            # Convertimos la imagen mejorada a base64
            imagen_base64 = imagen_a_base64(imagen_mejorada)
            
            instrucciones = "Analiza esta imagen de una propiedad inmobiliaria y "
            if opciones["agregar_muebles"]:
                instrucciones += "a√±ade muebles en espacios vac√≠os con un estilo moderno y acogedor. "
            if opciones["mejorar_iluminacion"]:
                instrucciones += "mejora la iluminaci√≥n para hacerla m√°s atractiva. "
            if opciones["corregir_color"]:
                instrucciones += "corrige el balance de color para que sea m√°s natural. "
            if opciones["eliminar_objetos"]:
                instrucciones += "elimina objetos innecesarios o desordenados. "
            if opciones["virtualstaging"]:
                instrucciones += "realiza un virtual staging completo con decoraci√≥n moderna y atractiva. "
            
            # Aqu√≠ puedes enviar la imagen a la IA si deseas que aplique an√°lisis o mejoras adicionales, pero no para inventarla.
            response = openai.Image.create(
                model="dall-e-3",
                prompt=instrucciones,
                n=1,
                size="1024x1024",
                quality="standard",
            )
            imagen_url = response.data[0]['url']
            
            # Obtener la URL de la imagen procesada por IA y devolverla
            imagen_url = response['data'][0]['url']
            respuesta = requests.get(imagen_url)
            imagen_procesada = Image.open(io.BytesIO(respuesta.content))
            return imagen_procesada
        except Exception as e:
            st.error(f"Error al procesar la imagen: {str(e)}")
            return None

    # Funci√≥n para analizar imagen con IA (si es necesario para extraer informaci√≥n adicional)
    def analizar_imagen(imagen):
        try:
            imagen_base64 = imagen_a_base64(imagen)
            response = openai.Completion.create(
                model="gpt-4-vision-preview",
                messages=[
                    {
                        "role": "user",
                        "content": "Analiza esta imagen de una propiedad inmobiliaria y extrae informaci√≥n relevante que pueda no estar mencionada en los datos del formulario. Responde en formato JSON."
                    },
                    {
                        "role": "user",
                        "content": f"data:image/jpeg;base64,{imagen_base64}"
                    }
                ]
            )
            resultado_text = response.choices[0].message['content']
            return json.loads(resultado_text)
        except Exception as e:
            st.error(f"Error al analizar la imagen: {str(e)}")
            return None

    # Interfaz de usuario
    st.subheader("üì∏ A√±adir im√°genes o planos del inmueble")

    # Opciones de procesamiento de im√°genes
    st.write("Opciones de procesamiento de im√°genes:")
    procesar_imagenes = st.checkbox("Procesar im√°genes con IA", value=True)
    st.write("Selecciona qu√© mejoras aplicar a las im√°genes:")
    col1_img, col2_img = st.columns(2)

    with col1_img:
        agregar_muebles = st.checkbox("Agregar muebles en espacios vac√≠os", value=True)
        mejorar_iluminacion = st.checkbox("Mejorar iluminaci√≥n", value=True)
        corregir_color = st.checkbox("Corregir balance de color", value=True)

    with col2_img:
        eliminar_objetos = st.checkbox("Eliminar objetos innecesarios", value=False)
        virtualstaging = st.checkbox("Virtual staging (decoraci√≥n completa)", value=False)
        analizar_caracteristicas = st.checkbox("Analizar caracter√≠sticas no mencionadas", value=True)

    # Subida de archivos
    uploaded_files = st.file_uploader("Sube fotos o planos", type=["jpg", "jpeg", "png", "pdf"], accept_multiple_files=True)

    # Mostrar y procesar las im√°genes
    if uploaded_files:
        st.write("Im√°genes cargadas:")
        for i, uploaded_file in enumerate(uploaded_files):
            if uploaded_file.type in ["image/jpeg", "image/png"]:
                col_orig, col_proc = st.columns(2)
                with col_orig:
                    st.write(f"Imagen original {i+1}:")
                    image = Image.open(uploaded_file)
                    st.image(image, caption=f"Original: {uploaded_file.name}", use_container_width=True)

                with col_proc:
                    if procesar_imagenes:
                        st.write("Imagen procesada con IA:")
                        opciones_proceso = {
                            "agregar_muebles": agregar_muebles,
                            "mejorar_iluminacion": mejorar_iluminacion,
                            "corregir_color": corregir_color,
                            "eliminar_objetos": eliminar_objetos,
                            "virtualstaging": virtualstaging
                        }
                        with st.spinner("Procesando imagen..."):
                            imagen_procesada = procesar_imagen_con_ia(image, opciones_proceso)
                        if imagen_procesada:
                            st.image(imagen_procesada, caption=f"Procesada: {uploaded_file.name}", use_container_width=True)
                            buffered = io.BytesIO()
                            imagen_procesada.save(buffered, format="JPEG")
                            st.download_button(
                                label="Descargar imagen procesada",
                                data=buffered.getvalue(),
                                file_name=f"procesado_{uploaded_file.name}",
                                mime="image/jpeg"
                            )

                    if analizar_caracteristicas:
                        with st.expander(f"An√°lisis de imagen {i+1}"):
                            with st.spinner("Analizando imagen..."):
                                resultado_analisis = analizar_imagen(image)
                            if resultado_analisis:
                                if "error" in resultado_analisis:
                                    st.write("Resultado del an√°lisis (formato bruto):")
                                    st.write(resultado_analisis["resultado_bruto"])
                                else:
                                    st.write("Caracter√≠sticas detectadas en la imagen:")
                                    for clave, valor in resultado_analisis.items():
                                        if valor and clave != "error":
                                            st.write(f"**{clave.replace('_', ' ').title()}**: {valor}")
                                    st.write("¬øQuieres incluir esta informaci√≥n en el anuncio?")
                                    incluir_info = st.checkbox(f"Incluir informaci√≥n de la imagen {i+1} en el anuncio", key=f"incluir_info_{i}")
                                    if incluir_info:
                                        if "informacion_adicional" not in st.session_state:
                                            st.session_state.informacion_adicional = ""
                                        info_para_anuncio = "\n".join([f"{k.replace('_', ' ').title()}: {v}" for k, v in resultado_analisis.items() if v and k != "error"])
                                        st.session_state.informacion_adicional += f"\nInformaci√≥n detectada en imagen {i+1}:\n{info_para_anuncio}\n"
                                st.write(f"Archivo {uploaded_file.name} cargado correctamente.")

    # Destino del anuncio
    st.subheader("üì£ Selecciona el destino del anuncio")
    destino = st.radio(
        "¬øD√≥nde quieres publicar el anuncio?",
        ("Portales inmobiliarios (Idealista, Fotocasa, Milanuncios)", "Redes sociales (Facebook, Instagram)")
    )

    # Actualizar la funci√≥n de generaci√≥n de anuncio para que incluya la informaci√≥n de las im√°genes
    def generar_anuncio(datos):
        if hasattr(st.session_state, 'informacion_adicional') and st.session_state.informacion_adicional:
            if "informacion_adicional" in datos:
                datos["informacion_adicional"] += "\n" + st.session_state.informacion_adicional
            else:
                datos["informacion_adicional"] = st.session_state.informacion_adicional

        prompt = f"""
        Eres un experto en marketing inmobiliario internacional, especializado en crear anuncios profesionales y persuasivos para la venta o alquiler de propiedades en distintos pa√≠ses y plataformas.

        Tu objetivo es generar un anuncio de alto impacto, optimizado para:

        1. **Portales inmobiliarios** como Idealista, Fotocasa, Milanuncios, Zillow, Immowelt, SeLoger, Rightmove‚Ä¶
        2. **Redes sociales** como Instagram, Facebook, TikTok o LinkedIn.

        El anuncio debe:

        - Ser atractivo, claro, natural y persuasivo.
        - Destacar los beneficios y el estilo de vida que ofrece la propiedad.
        - Adaptarse al canal:
          - Si el destino es "portales inmobiliarios", escribe con estilo profesional y estructurado, orientado a SEO y con llamadas a la acci√≥n claras.
          - Si el destino es "redes sociales", usa un estilo m√°s directo, emocional, con emojis (donde encajen), y termina con hashtags relevantes seg√∫n el pa√≠s o ciudad.

        Utiliza la informaci√≥n facilitada para redactar el texto sin repetir datos de forma rob√≥tica. No enumeres todo como una lista. Transforma los datos en frases que comuniquen valor real.

        üìù DATOS DISPONIBLES:

        üè∑ Tipo de operaci√≥n: {datos['tipo_operacion']}  
        üè° Tipo de propiedad: {datos['tipo']}  
        üìç Ubicaci√≥n: {datos['ubicacion']}  
        üìê Superficie: {datos['m2']} m¬≤ construidos, {datos['m2_utiles']} m¬≤ √∫tiles, {datos['m2_terreno']} m¬≤ de terreno  
        üõè Habitaciones: {datos['habitaciones']} | üõÅ Ba√±os: {datos['ba√±os']}  
        üåû Fachada: {datos['fachada']} | Orientaci√≥n: {datos['orientacion']}  
        üìà Estado: {datos['estado']} | Certificado energ√©tico: {datos['certificado']}  
        üèó Suelo interior: {datos['suelo_interior']} | Suelo exterior: {datos['suelo_exterior']}  
        ‚ú® Extras vivienda: {', '.join(datos['extras_vivienda']) if datos['extras_vivienda'] else 'Ninguno'}  
        üè¢ Extras edificio: {', '.join(datos['extras_edificio']) if datos['extras_edificio'] else 'Ninguno'}  
        üì∏ Terraza: {datos['metros_terraza']} m¬≤ | Balc√≥n: {datos['metros_balcon']} m¬≤ | Trastero: {datos['metros_trastero']} m¬≤ | Garaje: {datos['metros_garaje']} m¬≤  
        üó∫ Servicios cercanos: {datos['descripcion_servicios']}  
        üåä/üèû Otros (vistas, entorno, etc.): {datos['descripcion_cercania']}  
        üí∂ Precio: {datos['precio']} ‚Ç¨ | Gastos comunidad: {datos['gastos']} ‚Ç¨  
        ‚ö† Situaci√≥n (ocupado, libre, alquilado, etc.): {datos['situacion']}  
        üìù Informaci√≥n adicional: {datos['informacion_adicional']}  
        üì£ Destino del anuncio: {datos['destino']}  

        üéØ Recuerda: escribe como si fueras un copywriter de alto nivel. Seduce, informa y convence.
        Incluye una menci√≥n a las im√°genes mejoradas con IA si estas se han proporcionado, destacando los aspectos visuales del inmueble.
        """

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )

        return response.choices[0].message.content

    # Bot√≥n para generar el anuncio
    st.subheader("üß† Generador de anuncio con IA")
    if st.button("‚ú® Generar anuncio optimizado"):
        datos = recopilar_datos()
        anuncio = generar_anuncio(datos)
        st.success("‚úÖ Anuncio generado con √©xito:")
        st.text_area("üìù Anuncio generado", value=anuncio, height=300)

# Planes
elif menu == textos[lang]["nav"][2]:
    st.header(textos[lang]["planes_titulo"])
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("üéÅ Gratis")
        st.write("- Hasta 5 anuncios/mes")
        st.write("- 1 idioma")
        st.write("- Soporte b√°sico")
        st.write("üí∏ 0 ‚Ç¨/mes")
    with col2:
        st.subheader("üíº Profesional")
        st.write("- Hasta 50 anuncios/mes")
        st.write("- Hasta 3 idiomas")
        st.write("- Soporte prioritario")
        st.write("üí≥ 14,90 ‚Ç¨/mes")
    with col3:
        st.subheader("üè¢ Agencia")
        st.write("- Anuncios ilimitados")
        st.write("- Hasta 10 idiomas")
        st.write("- IA personalizada")
        st.write("üìû Contactar")

# Contacto
elif menu == textos[lang]["nav"][3]:
    st.header(textos[lang]["contacto_titulo"])
    st.markdown(textos[lang]["contacto_desc"])
    st.text_input(textos[lang]["nombre"])
    st.text_input(textos[lang]["correo"])
    st.text_area(textos[lang]["mensaje"])
    st.button(textos[lang]["enviar"])

